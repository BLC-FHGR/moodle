<?php

// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * An oauth2 redirection endpoint which can be used for an application:
 * http://tools.ietf.org/html/draft-ietf-oauth-v2-26#section-3.1.2
 *
 * This is used because some oauth servers will not allow a redirect urls
 * with get params (like repository callback) and that needs to be called
 * using the state param.
 *
 * @package    core
 * @copyright  2012 Dan Poltawski
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

require_once(__DIR__ . '/../config.php');

$error = optional_param('error', '', PARAM_RAW);
if ($error) {
    $message = optional_param('error_description', '', PARAM_RAW);
    if ($message) {
        print_error($message);
    } else {
        print_error($error);
    }
    die();
}

// OAuth 2.0 needs to be extrensible. Therefore the parameters should be 
// optional.
// The state parameter we've given (used in moodle as a redirect url).
$state = optional_param('state', PARAM_LOCALURL);

// Assertion authorizations are identified via their grant_type parameter.
$type = optional_param('grant_type', PARAM_LOCALURL);

if (isset($state)) {
    // If state is set, then code is required.
    // The authorization code generated by the authorization server.
    $code = required_param('code', PARAM_RAW);

    // Code flow initiated by web-sessions.
    $redirecturl = new moodle_url($state);
    $params = $redirecturl->params();

    if (isset($code) and isset($params['sesskey']) and confirm_sesskey($params['sesskey'])) {
        $redirecturl->param('oauth2code', $code);
        redirect($redirecturl);
    } else {
        print_error('invalidsesskey');
    }
} else if ($type == 'urn:ietf:params:oauth:grant-type:jwt-bearer') {
    // RFC 7521 assertion authorization flow initiated by other services using
    // the assertion as "code", that can be upgraded to a token.
    // For the assertion authorization there is no state attribute.
    // Therefore, a redeirect URL must be generated.

    $redirecturl = new moodle_url(MY_MOODLE_URL_WITH_LOGIN_PHP); // FIXME: use the correct URL from the configs.

    // The entire request MUST get forwarded unaltered to the authorization server.
    // This means we have to translate all optional params in a way 
    // that login.php can handle, gracefully. 

    $redirecturl->param('oauth2grant_type', $type);
    
    // TODO: PARAMETER TRANSLATION HERE

    // Finally, redirect. 
    redirect($redirecturl);
} else {
    print_error('invalidsesskey'); // FIXME: This should return a 400 error.
} 
